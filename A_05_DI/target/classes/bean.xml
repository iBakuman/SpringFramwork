<?xml version="1.0" encoding="UTF-8"?>
<!--suppress SpringFacetInspection -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--
        spring中的依赖注入
        1.依赖注入：
            Dependency Injection
        2.IOC的作用：
            降低程序间的耦合（依赖关系）
        3.依赖关系的管理：
            以后都交个spring维护，在当前类需要用到其他类的对象，由spring为我们提供，我们只需要在配置文件中说明
        4.依赖关系的维护就称之为依赖注入（DI）
        5.依赖注入能注入的数据类型
            1.基本类型和String
            2.其他bean类型（在配置文件中或者注解配置过的bean）
            3.复杂类型/集合类型
        6.注入的方式
            1.使用构造函数提供
            2.使用set方法提供
            3.使用注解提供
    -->

    <!--
        构造函数注入：
        使用的标签：constructor-arg
        标签中的属性
            type：用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型
            index：用于指定要注入的 数据给构造函数中指定索引位置的参数赋值。索引从0开始计
            name：用于指定给构造函数中指定名称的参数赋值
            ==================以上三个用于指定给构造函数中指定名称的参数赋值===================
            value：用于提供基本类型和String类型的数据
            ref：用于指定其他的bean类型数据，它指的就是spring的ioc核心容器中出现过的bean对象
        优势：
            在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功
        劣势：
            改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供
    -->
    <bean id="accountService" class="com.example.service.impl.AccountServiceImpl">
        <constructor-arg name="age" value="81"/>
        <!--error：1999-2-12被视为一个字符串，不能作为Date对象的初值-->
        <!--<constructor-arg name="birthday" value="1999-2-12"/>-->
        <constructor-arg name="birthday" ref="now"/>
        <constructor-arg name="name" value="高"/>
    </bean>
    <!--为解决将日期视为字符串的问题，自己创建一个Date对象-->
    <bean id="now" class="java.util.Date"/>

    <!--
        set方法注入         更常用的方式
        使用的标签：property
        出现的位置：bean标签的内部
        标签的属性：
            name：用于指定注入时所调用的set方法名称
            value：用于提供基本类型和String类型的数据
            ref：用于指定其他的bean类型数据，它指的就是spring的ioc核心容器中出现过的bean对象
         优势：
            创建对象时没有明确的限制，可以直接使用默认构造函数
         劣势：
            如果有某个成员必须有值，则获取对象时有可能set方法没有执行
    -->
    <bean id="accountService2" class="com.example.service.impl.AccountServiceImpl2">
        <!--name=age中的age取的是set方法后面的部分（setAge后面的部分是age）而不是类的属性名称-->
        <property name="age" value="12"/>
        <property name="birthday" ref="now"/>
        <property name="name" value="Gajsojf"/>
    </bean>

    <!--
        复杂类型的注入/集合类型的注入
        用于给List结构集合注入的标签
            list array set
        用于给map结构集合注入的标签
            map props
        结构相同，标签可以互换
    -->
    <bean id="accountService3" class="com.example.service.impl.AccountServiceImpl3">
        <property name="myStrs">
            <array>
                <value>AAA</value>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </array>
        </property>
        <property name="myList">
            <list>
                <value>GSFA</value>
                <value>GSFGA</value>
                <value>BIEJG</value>
            </list>
        </property>
        <property name="mySet">
            <list><!--可以使用list标签而不使用set标签-->
                <value>1235</value>
                <value>7521</value>
                <value>1239</value>
            </list>
        </property>
        <property name="myMap">
            <props>
                <prop key="a1">a1</prop>
                <prop key="a2">a2</prop>
            </props>
        </property>
        <property name="myProps">
            <map>
                <entry key="a1" value="ajakjsa"/>
                <entry key="a2">
                    <value>sjgaisj</value>
                </entry>
            </map>
        </property>
    </bean>
</beans>

